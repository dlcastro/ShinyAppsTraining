library(vroom)
library(tidyverse)
#Data: National Electronic Injury Surveillance System (NEISS) - 2017
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv")
population <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv")
#Button Foward and Back Stories:
storyfoward <- function(){
if(nrow(selected)==order){
order <- 1
} else{
order <- order + 1
}
}
storyback <- function(){
if(order()==1){
order() <- nrow(selected())
} else{
order() <- order - 1
}
}
#############################
##Resume function:
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
##UI
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Produto", setNames(products$prod_code, products$title), width = "100%")
),
column(2, selectInput("y","Y axis", c("rate", "count"))),
column(2, numericInput("rows", "N Rows Table (+ Others)", value = 5))
),
fluidRow(
column(4, DT::dataTableOutput("diag")),
column(4, DT::dataTableOutput("body_part")),
column(4, DT::dataTableOutput("location")),
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(1, actionButton("storyback", "<")),
column(1, actionButton("storyfoward",">")),
column(10, textOutput("narrative"))
)
)
##Server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
order <- reactive({
input$code
return(1)
})
observeEvent(input$storyfoward, {
storyfoward()
})
observeEvent(input$storyback, {
storyback()
})
output$diag <- DT::renderDataTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- DT::renderDataTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- DT::renderDataTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = T) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- renderText({
selected() %>% pull(narrative) %>% nth(order())
})
}
shinyApp(ui,server)
library(shiny)
library(DT)
library(vroom)
library(tidyverse)
#Data: National Electronic Injury Surveillance System (NEISS) - 2017
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv")
population <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv")
#Button Foward and Back Stories:
storyfoward <- function(){
if(nrow(selected)==order){
order <- 1
} else{
order <- order + 1
}
}
storyback <- function(){
if(order()==1){
order() <- nrow(selected())
} else{
order() <- order - 1
}
}
#############################
##Resume function:
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
##UI
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Produto", setNames(products$prod_code, products$title), width = "100%")
),
column(2, selectInput("y","Y axis", c("rate", "count"))),
column(2, numericInput("rows", "N Rows Table (+ Others)", value = 5))
),
fluidRow(
column(4, DT::dataTableOutput("diag")),
column(4, DT::dataTableOutput("body_part")),
column(4, DT::dataTableOutput("location")),
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(1, actionButton("storyback", "<")),
column(1, actionButton("storyfoward",">")),
column(10, textOutput("narrative"))
)
)
##Server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
order <- reactive({
input$code
return(1)
})
observeEvent(input$storyfoward, {
order()+1
})
observeEvent(input$storyback, {
storyback()
})
output$diag <- DT::renderDataTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- DT::renderDataTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- DT::renderDataTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = T) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- renderText({
selected() %>% pull(narrative) %>% nth(order())
})
}
shinyApp(ui,server)
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
return(1+1)
return(1)
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
library(shiny)
library(DT)
library(vroom)
library(tidyverse)
#Data: National Electronic Injury Surveillance System (NEISS) - 2017
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv")
population <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv")
#Button Foward and Back Stories:
value <- 1
storyfoward <- function(){
if(nrow(selected())==order){
return(1)
} else{
return(order())
}
}
storyback <- function(){
if(order()==1){
order() <- nrow(selected())
} else{
order() <- order - 1
}
}
#############################
##Resume function:
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
##UI
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Produto", setNames(products$prod_code, products$title), width = "100%")
),
column(2, selectInput("y","Y axis", c("rate", "count"))),
column(2, numericInput("rows", "N Rows Table (+ Others)", value = 5))
),
fluidRow(
column(4, DT::dataTableOutput("diag")),
column(4, DT::dataTableOutput("body_part")),
column(4, DT::dataTableOutput("location")),
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(1, actionButton("storyback", "<")),
column(1, actionButton("storyfoward",">")),
column(10, textOutput("narrative"))
)
)
##Server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
observeEvent(input$storyfoward,{
value <<- value + 1
})
output$diag <- DT::renderDataTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- DT::renderDataTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- DT::renderDataTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = T) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- renderText({
selected() %>% pull(narrative) %>% nth(value)
})
}
shinyApp(ui,server)
runif(50)
library(shiny)
library(DT)
library(vroom)
library(tidyverse)
#Data: National Electronic Injury Surveillance System (NEISS) - 2017
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv")
population <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv")
#Button Foward and Back Stories:
value <- 1
storyfoward <- function(){
if(nrow(selected())==order){
return(1)
} else{
return(order())
}
}
storyback <- function(){
if(order()==1){
order() <- nrow(selected())
} else{
order() <- order - 1
}
}
#############################
##Resume function:
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
##UI
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Produto", setNames(products$prod_code, products$title), width = "100%")
),
column(2, selectInput("y","Y axis", c("rate", "count"))),
column(2, numericInput("rows", "N Rows Table (+ Others)", value = 5))
),
fluidRow(
column(4, DT::dataTableOutput("diag")),
column(4, DT::dataTableOutput("body_part")),
column(4, DT::dataTableOutput("location")),
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(1, actionButton("storyback", "<")),
column(1, actionButton("storyfoward",">")),
column(10, textOutput("narrative"))
)
)
##Server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- DT::renderDataTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- DT::renderDataTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- DT::renderDataTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = T) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- renderText({
selected() %>% pull(narrative) %>% nth(value)
})
}
shinyApp(ui,server)
library(shiny)
library(DT)
library(vroom)
library(tidyverse)
#Data: National Electronic Injury Surveillance System (NEISS) - 2017
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/products.tsv")
population <- vroom::vroom("https://raw.githubusercontent.com/hadley/mastering-shiny/master/neiss/population.tsv")
#Button Foward and Back Stories:
value <- 1
storyfoward <- function(){
if(nrow(selected())==order){
return(1)
} else{
return(order())
}
}
storyback <- function(){
if(order()==1){
order() <- nrow(selected())
} else{
order() <- order - 1
}
}
#############################
##Resume function:
count_top <- function(df, var, n) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
##UI
ui <- fluidPage(
fluidRow(
column(8,
selectInput("code", "Produto", setNames(products$prod_code, products$title), width = "100%")
),
column(2, selectInput("y","Y axis", c("rate", "count"))),
column(2, numericInput("rows", "N Rows Table (+ Others)", value = 5))
),
fluidRow(
column(4, DT::dataTableOutput("diag")),
column(4, DT::dataTableOutput("body_part")),
column(4, DT::dataTableOutput("location")),
),
fluidRow(
column(12, plotOutput("age_sex"))
),
fluidRow(
column(1, actionButton("storyback", "<")),
column(1, actionButton("storyfoward",">")),
column(10, textOutput("narrative"))
)
)
##Server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- DT::renderDataTable(
count_top(selected(), diag, input$rows), width = "100%"
)
output$body_part <- DT::renderDataTable(
count_top(selected(), body_part, input$rows), width = "100%"
)
output$location <- DT::renderDataTable(
count_top(selected(), location, input$rows), width = "100%"
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = T) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- renderText({
selected() %>% pull(narrative) %>% nth(value)
})
}
shinyApp(ui,server)
10 %% 150
(10 %% 150) + 140
(10 %% 150) + 141
(150 %% 150) + 1
(150 %% 150)
(110 %% 150)
(149 %% 150)
(300 %% 150)
(300 %/% 150)
(301 %/% 150)
3 %% 2
3 %/% 2
4 %% 2
150 %% 2
((8 - 2) %% 10)-1
((8 - 2) %% 10) + 1
((1 - 2) %% 10) + 1
-1 %% 10
-8 %% 10
runApp('1-NESS_ShinyApplication.R')
runApp('1-NESS_ShinyApplication.R')
